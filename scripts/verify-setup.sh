#!/bin/bash

# FinanceInfo Pro - Verifica√ß√£o de Setup
# Script para verificar se o ambiente est√° configurado corretamente

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç Verificando configura√ß√£o do ambiente FinanceInfo Pro...${NC}"

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n√£o est√° instalado. Instale o Docker Desktop.${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n√£o est√° instalado.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker e Docker Compose est√£o instalados${NC}"

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando. Inicie o Docker Desktop.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker est√° rodando${NC}"

# Verificar arquivos de configura√ß√£o
files_to_check=(
    "docker-compose.yml"
    ".env.example"
    "package.json"
    "redis/redis.conf"
    "database/init/01-init.sql"
)

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file encontrado${NC}"
    else
        echo -e "${RED}‚ùå $file n√£o encontrado${NC}"
        exit 1
    fi
done

# Verificar se .env existe
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ .env encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  .env n√£o encontrado. Ser√° criado automaticamente.${NC}"
fi

# Verificar se Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js n√£o est√° instalado. Instale Node.js 18+.${NC}"
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2)
REQUIRED_VERSION="18.0.0"

if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$NODE_VERSION" | sort -V | head -n1)" = "$REQUIRED_VERSION" ]; then
    echo -e "${GREEN}‚úÖ Node.js $NODE_VERSION est√° instalado${NC}"
else
    echo -e "${RED}‚ùå Node.js $NODE_VERSION √© muito antigo. Requer 18.0.0+${NC}"
    exit 1
fi

# Verificar se npm est√° instalado
if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm n√£o est√° instalado.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ npm est√° instalado${NC}"

# Verificar sintaxe do docker-compose.yml
if docker-compose config > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ docker-compose.yml est√° v√°lido${NC}"
else
    echo -e "${RED}‚ùå docker-compose.yml possui erros de sintaxe${NC}"
    exit 1
fi

# Verificar se as portas est√£o livres
ports_to_check=(5432 6379 5050 8081 8080)

for port in "${ports_to_check[@]}"; do
    if lsof -i :$port > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Porta $port est√° em uso${NC}"
    else
        echo -e "${GREEN}‚úÖ Porta $port est√° livre${NC}"
    fi
done

echo ""
echo -e "${GREEN}üéâ Verifica√ß√£o conclu√≠da com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
echo -e "   1. Execute: ${YELLOW}./scripts/dev-setup.sh${NC}"
echo -e "   2. ou: ${YELLOW}npm run setup${NC}"
echo -e "   3. Depois: ${YELLOW}npm run dev${NC}"
echo ""
echo -e "${BLUE}üîß Comandos de diagn√≥stico:${NC}"
echo -e "   ‚Ä¢ ${YELLOW}docker-compose ps${NC} - Status dos containers"
echo -e "   ‚Ä¢ ${YELLOW}docker-compose logs${NC} - Logs dos containers"
echo -e "   ‚Ä¢ ${YELLOW}npm run health${NC} - Verificar sa√∫de dos servi√ßos"